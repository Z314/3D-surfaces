import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from mpl_toolkits.mplot3d import Axes3D

# Desired pixel dimensions
width_px = 1400
height_px = 1000
dpi = 100  # Dots per inch

# Convert pixels to inches
fig_width = width_px / dpi
fig_height = height_px / dpi

#Sine Wave Surface
# Define the grid
x = np.linspace(-5, 5, 100)
y = np.linspace(-5, 5, 100)
x, y = np.meshgrid(x, y)
z = np.sin(np.sqrt(x**2 + y**2))

# Create the plot
fig = plt.figure(figsize=(fig_width, fig_height), dpi=dpi)
ax = fig.add_subplot(111, projection='3d')

# Plot the surface
surface = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='k', alpha=0.8)

# Customize the plot
ax.set_title("Sine Wave Surface", fontsize=16)
ax.set_xlabel("X-axis", fontsize=12)
ax.set_ylabel("Y-axis", fontsize=12)
ax.set_zlabel("Z-axis", fontsize=12)

# Add a color bar
fig.colorbar(surface, ax=ax, shrink=0.5, aspect=10)

# Save the figure as a PNG
plt.savefig("sine_wave_surface.png", dpi=300, bbox_inches='tight')  # Adjust dpi for higher resolution

# Save the figure as SVG
plt.savefig("sine_wave_surface.svg", bbox_inches='tight')

# Function to update the view for each frame
def update(frame):
    ax.cla()  # Clear the current plot
    surface = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='k', alpha=0.8)
    ax.set_title("Torus", fontsize=16)
    ax.set_xlabel("X-axis", fontsize=12)
    ax.set_ylabel("Y-axis", fontsize=12)
    ax.set_zlabel("Z-axis", fontsize=12)
    ax.view_init(elev=30, azim=frame)  # Rotate the view
    return surface,

# Generate the animation
frames = 360  # Number of frames (rotation steps)
ani = FuncAnimation(fig, update, frames=frames, interval=50, blit=False)

# Save as an animated GIF
ani.save("sinewave_animated.gif", writer="pillow", dpi=dpi, fps=20)

# Show the plot
plt.show()
